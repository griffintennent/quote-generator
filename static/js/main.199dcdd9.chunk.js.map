{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QUOTES","quote","author","QuoteGeneratorCard","props","state","text","handleClick","bind","randomNum","Math","floor","random","length","this","setState","id","className","href","target","title","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAGMA,EAAS,CACb,CAAEC,MAAO,qFAAsFC,OAAQ,aACvG,CAAED,MAAO,wIAAyIC,OAAQ,kBAC1J,CAAED,MAAO,sPAAmOC,OAAQ,iBACpP,CAAED,MAAO,iIAA6HC,OAAQ,uBAC9I,CAAED,MAAO,8HAA+HC,OAAQ,cAChJ,CAAED,MAAO,6PAA0OC,OAAQ,oBA8C9OC,E,kDA1Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNJ,OAAQ,IAGV,EAAKK,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,+CAUnB,WACE,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAOa,QAElDC,KAAKC,SAAS,CACZT,KAAMN,EAAOS,GAAWR,MACxBC,OAAQF,EAAOS,GAAWP,W,oBAI9B,WACE,OACE,qBAAKc,GAAG,qBAAR,SACE,sBAAKA,GAAG,YAAR,UACE,qBAAKA,GAAG,YAAR,SACE,+BACE,mBAAGC,UAAU,sBACb,sBAAMD,GAAG,OAAT,SAAiBF,KAAKT,MAAMC,YAGhC,qBAAKU,GAAG,cAAR,SACE,uBAAMA,GAAG,SAAT,cAAoBF,KAAKT,MAAMH,YAEjC,sBAAKc,GAAG,cAAR,UACE,mBAAGA,GAAG,cAAcE,KAAK,mCAAmCC,OAAO,OAAOC,MAAM,oBAAhF,SAAoG,mBAAGH,UAAU,kCACjH,wBAAQD,GAAG,YAAYC,UAAU,yBAAyBI,QAASP,KAAKP,YAAxE,mC,GAnCqBe,IAAMC,WCAnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.199dcdd9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst QUOTES = [\n  { quote: \"There is only one way to avoid criticism: do nothing, say nothing, and be nothing.\", author: \"Aristotle\" },\n  { quote: \"Only those who play to win. Only those who risk to win. History favors risk-takers. Forgets the timid. Everything else is commentary.\", author: \"Iveta Cherneva\" },\n  { quote: \"I always did something I was a little not ready to do. I think that’s how you grow. When there’s that moment of Wow, I’m not really sure I can do this, and you push through those moments, that’s when you have a breakthrough\", author: \"Marissa Mayer\" },\n  { quote: \"Don’t be too timid and squeamish about your actions. All life is an experiment. The more experiments you make the better.\", author: \"Ralph Waldo Emerson\" },\n  { quote: \"The first step toward success is taken when you refuse to be a captive of the environment in which you first find yourself.\", author: \"Mark Caine\" },\n  { quote: \"You can’t outwit fate by standing on the sidelines placing little side bets about the outcome of life. Either you wade in and risk everything you have to play the game or you don’t play at all. And if you don’t play you can’t win.\", author: \"Judith McNaught\" }\n];\n\nclass QuoteGeneratorCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      author: ''\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    var randomNum = Math.floor(Math.random() * QUOTES.length);\n\n    this.setState({\n      text: QUOTES[randomNum].quote,\n      author: QUOTES[randomNum].author\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"bootstrap-override\">\n        <div id=\"quote-box\">\n          <div id=\"text-zone\">\n            <h3>\n              <i className=\"fas fa-quote-left\"></i>\n              <span id=\"text\">{this.state.text}</span>\n            </h3>\n          </div>\n          <div id=\"author-zone\">\n            <span id=\"author\">-{this.state.author}</span>\n          </div>\n          <div id=\"button-zone\">\n            <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\" target=\"_top\" title=\"Tweet this quote!\"><i className=\"fab fa-twitter-square fa-2x\"></i></a>\n            <button id=\"new-quote\" className=\"btn btn-primary btn-sm\" onClick={this.handleClick}>New Quote</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default QuoteGeneratorCard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuoteGeneratorCard from './App';\n// import { store } from './app/store';\n// import { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <QuoteGeneratorCard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}